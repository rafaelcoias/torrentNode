public class App {
    public static void main(String[] args) {
        // Guardar em variaveis os argumentos fornecidos, ou usar valores padrão
        String ipAddress = args.length > 0 ? args[0] : "127.0.0.1";
        int port = args.length > 1 ? Integer.parseInt(args[1]) : 8080;
        String fileDirectory = args.length > 2 ? args[2] : System.getProperty("user.dir");

        System.out.println("A inicializar novo nó:");
        System.out.println("=> Endereço IP: " + ipAddress);
        System.out.println("=> Porta: " + port);
        System.out.println("=> Pasta de ficheiros: " + fileDirectory);

        // Criar um novo nó
        new IscTorrentNode(ipAddress, port, fileDirectory);
    }
}
import java.io.*;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class ClientHandler implements Runnable {
    // Atributos
    private Socket clientSocket;
    private String fileDirectory;
    private IscTorrentNode node;

    public ClientHandler(Socket clientSocket, String fileDirectory, IscTorrentNode node) {
        this.clientSocket = clientSocket;
        this.fileDirectory = fileDirectory;
        this.node = node;
    }

    // Funções públicas

    @Override
    public void run() {
        try {
            ObjectOutputStream out = new ObjectOutputStream(clientSocket.getOutputStream());
            out.flush();
            ObjectInputStream in = new ObjectInputStream(clientSocket.getInputStream());

            // Loop para lidar com mensagens do cliente, fica aberto até a conexão ser
            // fechada
            while (true) {
                Object message = in.readObject();

                // Se a mensagem for uma string e começar com "CONNECT", é um pedido de conexão
                if (message instanceof String && ((String) message).startsWith("CONNECT")) {
                    String neighbor = ((String) message).split(" ")[1];
                    node.addNeighbor(neighbor);
                    System.out.println("Novo vizinho adicionado: " + neighbor);
                    // Avisar o vizinho que a conexão foi bem sucedida
                    out.writeObject("OK CONNECTED");
                    out.flush();
                    continue;
                }

                if (message instanceof WordSearchMessage) {
                    handleWordSearchMessage((WordSearchMessage) message, out);
                } else if (message instanceof FileBlockRequestMessage) {
                    FileBlockRequestMessage req = (FileBlockRequestMessage) message;
                    handleFileBlockRequest(req, out);
                } else {
                    System.err.println("Mensagem inválida recebida: " + message);
                }
            }
        } catch (IOException | ClassNotFoundException e) {
            // System.err.println("Erro de comunicação com o cliente.");
        } finally {
            try {
                clientSocket.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    // Funções privadas

    // Funções de pesquisa

    private void handleWordSearchMessage(WordSearchMessage request, ObjectOutputStream out) throws IOException {
        String searchTerm = request.getSearchTerm();
        // Procurar ficheiros locais
        List<FileSearchResult> localResults = searchLocalFilesForResults(searchTerm);
    
        // Propagar pesquisa a vizinhos
        List<FileSearchResult> neighborResults = searchInNeighborsForResults(request, request.getSenderNode());
    
        // Combinar resultados
        localResults.addAll(neighborResults);
    
        // Enviar resposta
        WordSearchResponse response = new WordSearchResponse(localResults);
        out.writeObject(response);
        out.flush();
    }
    

    private List<FileSearchResult> searchLocalFilesForResults(String searchTerm) {
        List<FileSearchResult> results = new ArrayList<>();
        File directory = new File(fileDirectory);
        if (!directory.exists() || !directory.isDirectory()) return results;
        File[] allFiles = directory.listFiles();
        if (allFiles == null) return results;
    
        for (File file : allFiles) {
            if (file.isFile() && file.getName().contains(searchTerm)) {
                try {
                    String hash = FileManager.computeFileHash(file);
                    results.add(new FileSearchResult(hash, file.length(), file.getName(), node.getIpAddress() + ":" + node.getPort()));
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        return results;
    }

    private List<FileSearchResult> searchInNeighborsForResults(WordSearchMessage request, String senderNode) {
        List<FileSearchResult> allResults = new ArrayList<>();
        for (String neighbor : node.getConnectedNodes()) {
            if (neighbor.equals(senderNode)) continue;
            String[] parts = neighbor.split(":");
            String ip = parts[0];
            int port = Integer.parseInt(parts[1]);
            try (Socket socket = new Socket(ip, port);
                 ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                 ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {
                
                WordSearchMessage forwardedRequest = new WordSearchMessage(request.getSearchTerm(), node.getIpAddress() + ":" + node.getPort());
                out.writeObject(forwardedRequest);
                out.flush();
    
                Object response = in.readObject();
                if (response instanceof WordSearchResponse) {
                    WordSearchResponse wsResponse = (WordSearchResponse) response;
                    allResults.addAll(wsResponse.getResults());
                }
            } catch (Exception e) {
                System.err.println("Erro ao comunicar com o vizinho " + neighbor + ": " + e.getMessage());
            }
        }
        return allResults;
    }
    
    // Funções de download

    private void handleFileBlockRequest(FileBlockRequestMessage req, ObjectOutputStream out) throws IOException {
        // Obter o ficheiro pelo hash (usar FileManager)
        File f = node.getFileManager().getFileByHash(req.getFileHash());
        if (f == null) {
            // Ficheiro não disponível
            out.writeObject(new FileBlockAnswerMessage(req.getFileHash(), req.getOffset(), new byte[0]));
            out.flush();
            return;
        }

        byte[] data = readFileBlock(f, req.getOffset(), req.getLength());
        FileBlockAnswerMessage ans = new FileBlockAnswerMessage(req.getFileHash(), req.getOffset(), data);
        out.writeObject(ans);
        out.flush();
    }

    private byte[] readFileBlock(File file, long offset, int length) throws IOException {
        byte[] buffer = new byte[length];
        try (RandomAccessFile raf = new RandomAccessFile(file, "r")) {
            raf.seek(offset);
            int bytesRead = raf.read(buffer);
            if (bytesRead < length) {
                byte[] smaller = new byte[bytesRead];
                System.arraycopy(buffer, 0, smaller, 0, bytesRead);
                return smaller;
            }
        }
        return buffer;
    }

}
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class DownloadTasksManager {
    private String fileHash;
    private String fileName;
    private long fileSize;
    private int blockSize = 10240;
    private int totalBlocks;
    private byte[][] blocksData;
    private int nextBlockIndex = 0;
    private Map<String, Integer> blocksPerNode = new HashMap<>();
    private int blocksDownloaded = 0;

    public DownloadTasksManager(String fileHash, String fileName, long fileSize) {
        this.fileHash = fileHash;
        this.fileName = fileName;
        this.fileSize = fileSize;
        this.totalBlocks = (int) ((fileSize + blockSize - 1) / blockSize);
        this.blocksData = new byte[totalBlocks][];
    }

    public synchronized int getNextBlockToDownloadIndex() {
        if (nextBlockIndex < totalBlocks) {
            return nextBlockIndex++;
        }
        return -1;
    }

    public int getTotalBlocks() {
        return totalBlocks;
    }

    public Map<String, Integer> getBlocksPerNode() {
        return blocksPerNode;
    }

    public synchronized FileBlockRequestMessage getNextBlockToDownload(int blockIndex) {
        long offset = (long) blockIndex * blockSize;
        int length = (int) Math.min(blockSize, fileSize - offset);
        return new FileBlockRequestMessage(fileHash, offset, length);
    }

    public synchronized void storeBlockData(int blockIndex, byte[] data) {
        blocksData[blockIndex] = data;
        blocksDownloaded++;
        if (blocksDownloaded == totalBlocks) {
            notifyAll();
        }
    }

    public synchronized void waitForCompletion() throws InterruptedException {
        while (blocksDownloaded < totalBlocks) {
            wait();
        }
    }

    public void writeToFile(String directoryPath) throws IOException {
        File outFile = new File(directoryPath, fileName);
        try (FileOutputStream fos = new FileOutputStream(outFile)) {
            for (byte[] block : blocksData) {
                fos.write(block);
            }
        }
    }

    public synchronized void storeBlockData(int blockIndex, byte[] data, String nodeAddress) {
        blocksData[blockIndex] = data;
        blocksDownloaded++;
        blocksPerNode.put(nodeAddress, blocksPerNode.getOrDefault(nodeAddress, 0) + 1);
        if (blocksDownloaded == totalBlocks) {
            notifyAll();
        }
    }

}
import java.io.Serializable;

public class FileBlockAnswerMessage implements Serializable {
    private static final long serialVersionUID = 1L;
    private String fileHash;
    private long offset;
    private byte[] data;

    public FileBlockAnswerMessage(String fileHash, long offset, byte[] data) {
        this.fileHash = fileHash;
        this.offset = offset;
        this.data = data;
    }

    public String getFileHash() { return fileHash; }
    public long getOffset() { return offset; }
    public byte[] getData() { return data; }
}
import java.io.Serializable;

public class FileBlockRequestMessage implements Serializable {
    private static final long serialVersionUID = 1L;
    private String fileHash;
    private long offset;
    private int length;

    public FileBlockRequestMessage(String fileHash, long offset, int length) {
        this.fileHash = fileHash;
        this.offset = offset;
        this.length = length;
    }

    public String getFileHash() { return fileHash; }
    public long getOffset() { return offset; }
    public int getLength() { return length; }
}import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

public class FileDownloadWorker implements Runnable {
    private FileSearchResult fr;
    private DownloadTasksManager dtm;
    private String downloadDirectory;

    public FileDownloadWorker(FileSearchResult fr, DownloadTasksManager dtm, String downloadDirectory) {
        this.fr = fr;
        this.dtm = dtm;
        this.downloadDirectory = downloadDirectory;
    }

    @Override
    public void run() {
        String[] parts = fr.getNodeAddress().split(":");
        String ip = parts[0];
        int port = Integer.parseInt(parts[1]);

        try (Socket socket = new Socket(ip, port);
             ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
             ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {

            int totalBlocks = dtm.getTotalBlocks();
            while (true) {
                int blockIndex = dtm.getNextBlockToDownloadIndex();
                if (blockIndex == -1) break; // não há mais blocos para este worker

                FileBlockRequestMessage req = dtm.getNextBlockToDownload(blockIndex);
                out.writeObject(req);
                out.flush();

                Object response = in.readObject();
                if (response instanceof FileBlockAnswerMessage) {
                    FileBlockAnswerMessage ans = (FileBlockAnswerMessage) response;
                    dtm.storeBlockData(blockIndex, ans.getData(), fr.getNodeAddress());
                }                
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class FileManager {
    private Map<String, File> filesByHash = new HashMap<>();

    public FileManager(String directoryPath) {
        File dir = new File(directoryPath);
        if (dir.exists() && dir.isDirectory()) {
            for (File f : dir.listFiles()) {
                if (f.isFile()) {
                    try {
                        String hash = computeFileHash(f);
                        filesByHash.put(hash, f);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    public File getFileByHash(String hash) {
        return filesByHash.get(hash);
    }

    public Map<String, File> getFilesByHash() {
        return filesByHash;
    }

    public static String computeFileHash(File f) throws IOException, NoSuchAlgorithmException {
        byte[] fileBytes = Files.readAllBytes(Paths.get(f.getPath()));
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        byte[] hashBytes = digest.digest(fileBytes);
        StringBuilder sb = new StringBuilder();
        for (byte b : hashBytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }
}
import java.io.Serializable;

public class FileSearchResult implements Serializable {
    private static final long serialVersionUID = 1L;
    private String fileHash;
    private long fileSize;
    private String fileName;
    private String nodeAddress;

    public FileSearchResult(String fileHash, long fileSize, String fileName, String nodeAddress) {
        this.fileHash = fileHash;
        this.fileSize = fileSize;
        this.fileName = fileName;
        this.nodeAddress = nodeAddress;
    }

    public String getFileHash() {
        return fileHash;
    }

    public long getFileSize() {
        return fileSize;
    }

    public String getFileName() {
        return fileName;
    }

    public String getNodeAddress() {
        return nodeAddress;
    }
}
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IscTorrentNode {

    // Atributos
    private String ipAddress;
    private int port;
    private String fileDirectory;
    private List<String> connectedNodes;
    private FileManager fileManager;
    private List<FileSearchResult> lastSearchResults;

    public IscTorrentNode(String ipAddress, int port, String fileDirectory) {
        this.ipAddress = ipAddress;
        this.port = port;
        this.fileDirectory = fileDirectory;
        this.connectedNodes = new ArrayList<>();
        this.fileManager = new FileManager(fileDirectory);

        // Inicializa a interface gráfica deste nó
        initializeInterface();

        // Inicializa o servidor deste nó
        NodeServer server = new NodeServer(port, fileDirectory, this);
        server.startServer();
    }

    // Métodos publicos

    public synchronized void addNeighbor(String neighbor) {
        if (!connectedNodes.contains(neighbor)) {
            connectedNodes.add(neighbor);
            System.out.println("Vizinho adicionado: " + neighbor);
            System.out.println("Lista de vizinhos atualizada: " + connectedNodes);
        } else {
            System.out.println("Vizinho já existe: " + neighbor);
        }
    }

    public synchronized List<String> getConnectedNodes() {
        return new ArrayList<>(connectedNodes);
    }

    public String getIpAddress() {
        return this.ipAddress;
    }

    public int getPort() {
        return this.port;
    }

    public String getFileDirectory() {
        return this.fileDirectory;
    }

    public FileManager getFileManager() {
        return this.fileManager;
    }

    // Métodos privados

    private void initializeInterface() {
        // Configuração incial
        JFrame frame = new JFrame("Sistema de Partilha de Ficheiros");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());

        // Informações do nó
        JPanel infoPanel = new JPanel();
        infoPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
        JLabel infoLabel = new JLabel("IP: " + ipAddress + " | Porta: " + port + " | Pasta: " + fileDirectory);
        infoPanel.add(infoLabel);
        frame.add(infoPanel, BorderLayout.NORTH);

        // Painel de pesquisa e resultados
        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new BorderLayout());

        // Pesquisa de ficheiros
        JPanel searchPanel = new JPanel();
        searchPanel.setLayout(new FlowLayout());
        JTextField searchField = new JTextField(20);
        JButton searchButton = new JButton("Procurar");
        searchPanel.add(new JLabel("Texto a procurar:"));
        searchPanel.add(searchField);
        searchPanel.add(searchButton);

        // Resultados da pesquisa
        DefaultListModel<String> searchResults = new DefaultListModel<>();
        JList<String> searchResultsList = new JList<>(searchResults);
        JScrollPane scrollPane = new JScrollPane(searchResultsList);

        // Adiciona o painel de pesquisa e a lista de resultados ao painel central
        centerPanel.add(searchPanel, BorderLayout.NORTH);
        centerPanel.add(scrollPane, BorderLayout.CENTER);

        frame.add(centerPanel, BorderLayout.CENTER);

        // Ações
        JPanel actionPanel = new JPanel();
        actionPanel.setLayout(new FlowLayout());
        JButton connectButton = new JButton("Ligar a Nó");
        JButton downloadButton = new JButton("Descarregar");
        actionPanel.add(downloadButton);
        actionPanel.add(connectButton);
        frame.add(actionPanel, BorderLayout.SOUTH);

        // Ações dos botões
        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String searchTerm = searchField.getText().trim();
                if (searchTerm.isEmpty()) {
                    JOptionPane.showMessageDialog(frame, "Por favor, insira um termo de pesquisa válido.");
                    return;
                }
                searchFiles(searchTerm, searchResults);
            }
        });

        connectButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                connectNode();
            }
        });

        downloadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedFile = searchResultsList.getSelectedValue();
                if (selectedFile == null) {
                    JOptionPane.showMessageDialog(frame, "Por favor, selecione um ficheiro para descarregar.");
                    return;
                }
                downloadFile(selectedFile);
            }
        });

        frame.setVisible(true);
    }

    private void connectNode() {
        String nodeAddress = JOptionPane.showInputDialog("Por favor, insira o endereço do nó a ligar (IP:PORTA):");
        if (nodeAddress == null || nodeAddress.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Endereço inválido.");
            return;
        }

        String[] parts = nodeAddress.split(":");
        String remoteIp = parts[0];
        int remotePort = Integer.parseInt(parts[1]);

        try (Socket socket = new Socket(remoteIp, remotePort);
                ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {

            // Enviar para o remoto o pedido de ligação
            out.writeObject("CONNECT " + this.ipAddress + ":" + this.port);
            out.flush();

            Object response = in.readObject();
            if (response instanceof String && ((String) response).contains("CONNECTED")) {
                addNeighbor(nodeAddress);
            } else {
                JOptionPane.showMessageDialog(null, "Erro ao ligar ao nó.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao ligar ao nó: " + e.getMessage());
        }

    }

    private void searchFiles(String searchTerm, DefaultListModel<String> searchResults) {
        new Thread(() -> {
            try (Socket socket = new Socket(ipAddress, port);
                    ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                    ObjectInputStream in = new ObjectInputStream(socket.getInputStream())) {

                out.writeObject(new WordSearchMessage(searchTerm, ipAddress + ":" + port));
                out.flush();

                Object response = in.readObject();
                if (response instanceof WordSearchResponse) {
                    WordSearchResponse wsResponse = (WordSearchResponse) response;
                    List<FileSearchResult> fileResults = wsResponse.getResults();
                    this.lastSearchResults = fileResults;

                    SwingUtilities.invokeLater(() -> {
                        searchResults.clear();
                        // Mapear (fileName -> count)
                        Map<String, Integer> fileCountMap = new HashMap<>();
                        for (FileSearchResult fr : fileResults) {
                            fileCountMap.put(fr.getFileName(), fileCountMap.getOrDefault(fr.getFileName(), 0) + 1);
                        }

                        for (Map.Entry<String, Integer> entry : fileCountMap.entrySet()) {
                            String displayName = entry.getKey() + "<" + entry.getValue() + ">";
                            searchResults.addElement(displayName);
                        }
                    });
                }
            } catch (Exception e) {
                System.err.println("Erro na pesquisa: " + e.getMessage());
            }
        }).start();
    }

    private void downloadFile(String displayedName) {
        if (lastSearchResults == null || lastSearchResults.isEmpty())
            return;
        long startTime = System.currentTimeMillis();
        String fileName = displayedName.substring(0, displayedName.indexOf("<")); // extrai o nome antes do "<"

        // Encontrar todos os FileSearchResult para este nome
        List<FileSearchResult> candidates = new ArrayList<>();
        for (FileSearchResult fr : lastSearchResults) {
            if (fr.getFileName().equals(fileName)) {
                candidates.add(fr);
            }
        }

        if (candidates.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhum resultado encontrado para o ficheiro selecionado");
            return;
        }

        String fileHash = candidates.get(0).getFileHash();
        long fileSize = candidates.get(0).getFileSize();

        // Criar o DownloadTasksManager
        DownloadTasksManager dtm = new DownloadTasksManager(fileHash, fileName, fileSize);

        // Criar e iniciar threads de descarregamento (uma por nó disponível)
        for (FileSearchResult fr : candidates) {
            new Thread(new FileDownloadWorker(fr, dtm, fileDirectory)).start();
        }

        // Thread para aguardar a conclusão do download e exibir resultados
        new Thread(() -> {
            try {
                dtm.waitForCompletion();
                dtm.writeToFile(fileDirectory);
                long elapsedTime = System.currentTimeMillis() - startTime;
                Map<String, Integer> blocksMap = dtm.getBlocksPerNode();
                StringBuilder sb = new StringBuilder();
                sb.append("Ficheiro descarregado em ").append(elapsedTime).append("ms\n");
                for (Map.Entry<String, Integer> entry : blocksMap.entrySet()) {
                    sb.append(entry.getKey()).append(": ").append(entry.getValue()).append(" blocos\n");
                }
                JOptionPane.showMessageDialog(null, sb.toString());

            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

}
import java.io.IOException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class NodeServer {
    // Atributos
    private int port;
    private final String ipAddress = "127.0.0.1";
    private ServerSocket serverSocket;
    private String fileDirectory;
    private IscTorrentNode node;

    public NodeServer(int port, String fileDirectory, IscTorrentNode node) {
        this.port = port;
        this.fileDirectory = fileDirectory;
        this.node = node;
    }

    public void startServer() {
        try {
            serverSocket = new ServerSocket(port, 50, InetAddress.getByName(ipAddress));
            System.out.println("Servidor iniciado na porta " + port);

            ExecutorService pool = Executors.newFixedThreadPool(5);
            
            // Thread que aceita conexões de clientes
            new Thread(() -> {
                while (!serverSocket.isClosed()) {
                    try {
                        Socket clientSocket = serverSocket.accept();
                        pool.submit(new ClientHandler(clientSocket, fileDirectory, node));
                    } catch (IOException e) {
                        if (!serverSocket.isClosed())
                            System.err.println("Erro ao aceitar conexão: " + e.getMessage());
                    }
                }
            }).start();
        } catch (IOException e) {
            System.err.println("Erro ao iniciar o servidor: " + e.getMessage());
        }
    }

    public void stopServer() {
        try {
            serverSocket.close();
            System.out.println("Servidor encerrado.");
        } catch (IOException e) {
            System.err.println("Erro ao encerrar o servidor: " + e.getMessage());
        }
    }
}
import java.io.Serializable;

public class WordSearchMessage implements Serializable {
    private static final long serialVersionUID = 1L;
    private String searchTerm;
    private String senderNode; 

    public WordSearchMessage(String searchTerm, String senderNode) {
        this.searchTerm = searchTerm;
        this.senderNode = senderNode;
    }

    public String getSearchTerm() {
        return searchTerm;
    }

    public String getSenderNode() {
        return senderNode;
    }
}
import java.io.Serializable;
import java.util.List;

public class WordSearchResponse implements Serializable {
    private static final long serialVersionUID = 1L;
    private List<FileSearchResult> results;

    public WordSearchResponse(List<FileSearchResult> results) {
        this.results = results;
    }

    public List<FileSearchResult> getResults() {
        return results;
    }
}
